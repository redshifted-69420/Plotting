#ifndef SVG_GENERATOR_HPP
#define SVG_GENERATOR_HPP

#include <fstream>
#include <stdexcept>
#include "graph.hpp"

namespace Plot {

  class SvgGenerator {
public:
    static void saveSVG(const Canvas &canvas, const std::string &filename, int width, int height, bool minify = false) {
      std::ofstream svgFile(filename);
      if (!svgFile) {
        throw std::runtime_error("Failed to create SVG file: " + filename);
      }

      svgFile << "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n";
      svgFile << "<!-- Generated by Plot Library -->\n";
      svgFile << "<svg width=\"" << width << "\" height=\"" << height << "\" viewBox=\"0 0 " << width << " " << height
              << "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
      svgFile << "  <title>Plot</title>\n";
      svgFile << "  <desc>Generated plot with axes, grid, and data points.</desc>\n";
      svgFile << "  <style>\n";
      svgFile << "    .grid-line { stroke: #ccc; stroke-width: 0.5; }\n";
      svgFile << "    .axis-line { stroke: #000; stroke-width: 1; }\n";
      svgFile << "    .data-point { fill: #0074D9; }\n";
      svgFile << "  </style>\n";
      for (const auto &element: canvas.svgElements) {
        if (minify) {
          svgFile << element.data;
        } else {
          svgFile << "  " << element.data << "\n";
        }
      }
      svgFile << "</svg>\n";
      svgFile.close();
    }
  };
} // namespace Plot

#endif
